---
title: "Демо"
format: html
filters:
  - shinylive
---

Пример статического вебсайта с исполняемым Питоном.

  [https://dzenny.github.io/demos](https://dzenny.github.io/demos)


{{< include intro.qmd >}}


```{shinylive-python}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 560
## file: requirements.txt

## file: app.py
from pathlib import Path
import scipy.optimize
import numpy as np
import matplotlib.pyplot as plt
from data import data, get_approximations
from shiny import * # App, render, ui

header_style = "font-weight: 600; line-height: 225%;"
total = get_approximations()

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            #ui.output_text_verbatim('txt'),
            ui.input_radio_buttons(
                "minutes",
                ui.span("Воздействие:", style=header_style),
                {10: '10 мин', 20: '20 мин', 30: '30 мин'}
            ),
            ui.input_checkbox_group("curves",
                ui.span("Показать:", style=header_style),
                {
                    "exp": "Эксперимент",
                    "vis": "Визуально",
                    "mse": "MSE->BFGS",
                    "mae": "MAE->BFGS",
                },
                selected = ['exp', 'vis', 'mse', 'mae']
            ),
            #ui.output_table('output'),
        ),
        ui.panel_main(
            ui.output_plot("plot"),
            ui.output_text_verbatim('txt'),
        ),
    ),
)

styles = {
    'exp': {'color': 'blue'  , 'label': 'Эксперимент', 'marker': 'o'}, # не используется
    'vis': {'color': 'red'   , 'label': 'Визуально'},
    'mse': {'color': 'green' , 'label': 'MSE->BFGS'},
    'mae': {'color': 'purple', 'label': 'MAE->BFGS'},
}


def server(input, output, session):
    @output
    @render.plot(alt="Графики зависимостей")
    def plot():
        """Основная функция"""
        minutes = int(input.minutes())
        ts, cs, x0 = data[minutes]
        inp = total[minutes]

        fig, ax = plt.subplots(figsize=(12,8))
        ax.set_xlabel('Градусы (С)')
        ax.set_ylabel('Cтепень белизны?')
        ax.set_xlim(100, 400)
        ax.set_ylim(  0, 300)
        
        curves = input.curves()
        if 'exp' in curves:
            ax.plot(ts, cs, marker='o', color = 'blue', label='Эксперимент')
        
        for curve in set(curves)-{'exp'}:
            ax.plot(inp['xs'], inp[curve], **styles[curve])

        ax.legend();

    # @render.table
    # def output():
    #     return total[int(input.minutes())]['errors']

    @output
    @render.text
    def txt():
        return total[int(input.minutes())]['errors']


#www_dir = Path(__file__).parent / "www"
app = App(app_ui, server, debug=True)

## file: data.py
import numpy as np
import scipy.optimize
import pandas as pd


data = {
    10: (
        [100, 150, 200, 220, 230, 250, 300, 350, 400],
        [283, 267, 249, 232, 221, 187, 97,   45,  34],
        [254.0, 31.0, 0.03, 260.0]        
    ),
    20: (
        [100, 150, 200, 220, 230, 250, 300, 350, 400],
        [283, 267, 226, 208, 191,  81,  46,  42,  34],
        [254.0, 31.0, 0.05, 230.0]        
    ),
    30: (
        [100, 150, 200, 220, 230, 250, 300, 350, 400],
        [285, 267, 226, 168,  93,  74,  44,  38,  34],
        [254.0, 31.0, 0.05, 220.0]        
    ),
}

titles = {
    'vis': 'Визуально ',
    'mse': 'MSE->BFGS',
    'mae': 'MAE->BFGS'
}

def err(xs, ys):
    """Вычисляем максимальную относительную ошибку"""
    series = [np.abs(x-y)/x for x, y in zip(xs, ys)]
    return np.max(series)

def np_logistic(params):
    """Создаем numpy-вариант логистической функции
        - для matplotlib
    """
    max, min, k, t0 = params
    y = lambda t: max/(1+np.exp(k*(t-t0)))+min
    return np.frompyfunc(y, 1, 1)

def get_approximations():
    total = {}
    xs = np.linspace(100, 400, 100)
    for minutes in data.keys():
        df = pd.DataFrame(columns= ['max', 'min', 'k', 't0', 'δ'])
        txt_out = '              max     min       k       t0   δ\n'
        results =  {"xs": xs}

        ts, cs, x0 = data[minutes]

        def mse_func(params):
            """Вычисление функции MSE-ошибки -- будет минимизироваться"""
            max, min, k, t0 = params
            sum = 0
            for t, c in zip(ts, cs):
                sum += (max/(1+np.exp(k*(t-t0)))+min-c)**2
            return sum

        def mae_func(params):
            """Вычисление функции MAE-ошибки -- будет минимизироваться"""
            max, min, k, t0 = params
            sum = 0
            for t, c in zip(ts, cs):
                sum += np.abs(max/(1+np.exp(k*(t-t0)))+min-c)
            return sum

        min_sqr = scipy.optimize.minimize(mse_func, x0=x0, method='BFGS')
        min_abs = scipy.optimize.minimize(mae_func, x0=x0, method='BFGS')
        for curve, params in [('vis', x0), ('mse', min_sqr.x), ('mae', min_abs.x)]:
            y = np_logistic(params) 
            ys = y(xs)
            results[curve] = ys
            max, min, k, t0 = params
            error = err(xs, ys)           
            df.loc[curve] = (max, min, k, t0, error)
            txt_out += f'{titles[curve]}  {max:.3f} {min:.3f} {k:.5f} {t0:.3f} {error:.2f}%\n'

        results['errors'] = txt_out
        total[minutes] = results
    
    return total

```