[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Демо",
    "section": "",
    "text": "Пример статического вебсайта с исполняемым Питоном.\nhttps://dzenny.github.io/demos\n\n\n\nВведение:\n\n\n\nУстановка\nДолжны быть утановлены:\n\nДевелоперская версия Quarto (version 1.2.x). Можно скачать здесь.\nPython 3.8 or above.\nПитон модуь shinylive, который можно установить с помощью pip: pip install shinylive\n\nДалее\n\nСоздать quarto проект типа “вебсайт”, назовем его, например, demos:\n\nquarto create-project demos --type website\n\nПерейти в созданную папку demos, например, так:\n\ncd demos\n\nУстановить shinylive-quarto расширение для Quarto:\n\nquarto install extension quarto-ext/shinylive\nРасширение установится в папку _extensions/.\n\n\n\n\n\n\nВажное уведомление\n\n\n\nДля использования в git, нужно включить папку _extensions/ в список отслеживаемых.\n\n\n\n\n\n\n\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 560\n## file: requirements.txt\n\n## file: app.py\nfrom pathlib import Path\nimport scipy.optimize\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom data import data, get_approximations\nfrom shiny import * # App, render, ui\n\nheader_style = \"font-weight: 600; line-height: 225%;\"\ntotal = get_approximations()\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            #ui.output_text_verbatim('txt'),\n            ui.input_radio_buttons(\n                \"minutes\",\n                ui.span(\"Воздействие:\", style=header_style),\n                {10: '10 мин', 20: '20 мин', 30: '30 мин'}\n            ),\n            ui.input_checkbox_group(\"curves\",\n                ui.span(\"Показать:\", style=header_style),\n                {\n                    \"exp\": \"Эксперимент\",\n                    \"vis\": \"Визуально\",\n                    \"mse\": \"MSE->BFGS\",\n                    \"mae\": \"MAE->BFGS\",\n                },\n                selected = ['exp', 'vis', 'mse', 'mae']\n            ),\n            #ui.output_table('output'),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"plot\"),\n            ui.output_text_verbatim('txt'),\n        ),\n    ),\n)\n\nstyles = {\n    'exp': {'color': 'blue'  , 'label': 'Эксперимент', 'marker': 'o'}, # не используется\n    'vis': {'color': 'red'   , 'label': 'Визуально'},\n    'mse': {'color': 'green' , 'label': 'MSE->BFGS'},\n    'mae': {'color': 'purple', 'label': 'MAE->BFGS'},\n}\n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"Графики зависимостей\")\n    def plot():\n        \"\"\"Основная функция\"\"\"\n        minutes = int(input.minutes())\n        ts, cs, x0 = data[minutes]\n        inp = total[minutes]\n\n        fig, ax = plt.subplots(figsize=(12,8))\n        ax.set_xlabel('Градусы (С)')\n        ax.set_ylabel('Cтепень белизны?')\n        ax.set_xlim(100, 400)\n        ax.set_ylim(  0, 300)\n        \n        curves = input.curves()\n        if 'exp' in curves:\n            ax.plot(ts, cs, marker='o', color = 'blue', label='Эксперимент')\n        \n        for curve in set(curves)-{'exp'}:\n            ax.plot(inp['xs'], inp[curve], **styles[curve])\n\n        ax.legend();\n\n    # @render.table\n    # def output():\n    #     return total[int(input.minutes())]['errors']\n\n    @output\n    @render.text\n    def txt():\n        return total[int(input.minutes())]['errors']\n\n\n#www_dir = Path(__file__).parent / \"www\"\napp = App(app_ui, server, debug=True)\n\n## file: data.py\nimport numpy as np\nimport scipy.optimize\nimport pandas as pd\n\n\ndata = {\n    10: (\n        [100, 150, 200, 220, 230, 250, 300, 350, 400],\n        [283, 267, 249, 232, 221, 187, 97,   45,  34],\n        [254.0, 31.0, 0.03, 260.0]        \n    ),\n    20: (\n        [100, 150, 200, 220, 230, 250, 300, 350, 400],\n        [283, 267, 226, 208, 191,  81,  46,  42,  34],\n        [254.0, 31.0, 0.05, 230.0]        \n    ),\n    30: (\n        [100, 150, 200, 220, 230, 250, 300, 350, 400],\n        [285, 267, 226, 168,  93,  74,  44,  38,  34],\n        [254.0, 31.0, 0.05, 220.0]        \n    ),\n}\n\ntitles = {\n    'vis': 'Визуально ',\n    'mse': 'MSE->BFGS',\n    'mae': 'MAE->BFGS'\n}\n\ndef err(xs, ys):\n    \"\"\"Вычисляем максимальную относительную ошибку\"\"\"\n    series = [np.abs(x-y)/x for x, y in zip(xs, ys)]\n    return np.max(series)\n\ndef np_logistic(params):\n    \"\"\"Создаем numpy-вариант логистической функции\n        - для matplotlib\n    \"\"\"\n    max, min, k, t0 = params\n    y = lambda t: max/(1+np.exp(k*(t-t0)))+min\n    return np.frompyfunc(y, 1, 1)\n\ndef get_approximations():\n    total = {}\n    xs = np.linspace(100, 400, 100)\n    for minutes in data.keys():\n        df = pd.DataFrame(columns= ['max', 'min', 'k', 't0', 'δ'])\n        txt_out = '              max     min       k       t0   δ\\n'\n        results =  {\"xs\": xs}\n\n        ts, cs, x0 = data[minutes]\n\n        def mse_func(params):\n            \"\"\"Вычисление функции MSE-ошибки -- будет минимизироваться\"\"\"\n            max, min, k, t0 = params\n            sum = 0\n            for t, c in zip(ts, cs):\n                sum += (max/(1+np.exp(k*(t-t0)))+min-c)**2\n            return sum\n\n        def mae_func(params):\n            \"\"\"Вычисление функции MAE-ошибки -- будет минимизироваться\"\"\"\n            max, min, k, t0 = params\n            sum = 0\n            for t, c in zip(ts, cs):\n                sum += np.abs(max/(1+np.exp(k*(t-t0)))+min-c)\n            return sum\n\n        min_sqr = scipy.optimize.minimize(mse_func, x0=x0, method='BFGS')\n        min_abs = scipy.optimize.minimize(mae_func, x0=x0, method='BFGS')\n        for curve, params in [('vis', x0), ('mse', min_sqr.x), ('mae', min_abs.x)]:\n            y = np_logistic(params) \n            ys = y(xs)\n            results[curve] = ys\n            max, min, k, t0 = params\n            error = err(xs, ys)           \n            df.loc[curve] = (max, min, k, t0, error)\n            txt_out += f'{titles[curve]}  {max:.3f} {min:.3f} {k:.5f} {t0:.3f} {error:.2f}%\\n'\n\n        results['errors'] = txt_out\n        total[minutes] = results\n    \n    return total"
  }
]