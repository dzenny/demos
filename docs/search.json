[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Демо",
    "section": "",
    "text": "Пример статического вебсайта с исполняемым Питоном.\nhttps://dzenny.github.io/demos\n\n\n\nВведение:\n\n\n\nУстановка\nДолжны быть утановлены:\n\nДевелоперская версия Quarto (version 1.2.x). Можно скачать здесь.\nPython 3.8 or above.\nПитон модуь shinylive, который можно установить с помощью pip: pip install shinylive\n\nДалее\n\nСоздать quarto проект типа “вебсайт”, назовем его, например, demos:\n\nquarto create-project demos --type website\n\nПерейти в созданную папку demos, например, так:\n\ncd demos\n\nУстановить shinylive-quarto расширение для Quarto:\n\nquarto install extension quarto-ext/shinylive\nРасширение установится в папку _extensions/.\n\n\n\n\n\n\nВажное уведомление\n\n\n\nДля использования в git, нужно включить папку _extensions/ в список отслеживаемых.\n\n\n\n\n\n\n\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 420\n\nfrom pathlib import Path\nimport scipy.optimize\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = {\n    10: (\n        [100, 150, 200, 220, 230, 250, 300, 350, 400],\n        [283, 267, 249, 232, 221, 187, 97,   45,  34],\n        [254.0, 31.0, 0.03, 260.0]        \n    ),\n    20: (\n        [100, 150, 200, 220, 230, 250, 300, 350, 400],\n        [283, 267, 226, 208, 191,  81,  46,  42,  34],\n        [254.0, 31.0, 0.05, 230.0]        \n    ),\n    30: (\n        [100, 150, 200, 220, 230, 250, 300, 350, 400],\n        [285, 267, 226, 168,  93,  74,  44,  38,  34],\n        [254.0, 31.0, 0.05, 220.0]        \n    ),\n}\n\n\ndef error(xs, ys):\n    \"\"\"Вычисляем максимальную относительную ошибку\"\"\"\n    series = [np.abs(x-y)/x for x, y in zip(xs, ys)]\n    return np.max(series)\n\ndef f(params):\n    \"\"\"Создаем numpy-вариант логистической функции\n        - для matplotlib\n    \"\"\"\n    max, min, k, t0 = params\n    y = lambda t: max/(1+np.exp(k*(t-t0)))+min\n    return np.frompyfunc(y, 1, 1)\n\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_radio_buttons(\n                \"minutes\", \"Минуты воздействия\", {'10': 10, '20': 20, '30': 30}\n            ),\n            ui.input_checkbox_group(\"curves\",\n                \"Теоретические кривые\", \n                {\n                    \"exp\": \"Эксперимент\",\n                    \"vis\": \"Визуально\",\n                    \"mse\": \"MSE->BFGS\",\n                    \"mae\": \"MAE->BFGS\",\n                },\n                selected = ['exp', 'vis', 'mse', 'mae']\n            ),\n            ui.output_text_verbatim(\"output\"),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"plot\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"Графики зависимостей\")\n    def plot():\n        \"\"\"Основная функция\"\"\"\n        minutes = input.minutes()\n        ts, cs, x0 = data[int(minutes)]\n\n        def target_sqr(params):\n            \"\"\"Вычисление MSE-ошибки -- будет минимизироваться\"\"\"\n            max, min, k, t0 = params\n            sum = 0\n            for t, c in zip(ts, cs):\n                sum += (max/(1+np.exp(k*(t-t0)))+min-c)**2\n            return sum\n\n        def target_abs(params):\n            \"\"\"Вычисление MAE-ошибки -- будет минимизироваться\"\"\"\n            max, min, k, t0 = params\n            sum = 0\n            for t, c in zip(ts, cs):\n                sum += np.abs(max/(1+np.exp(k*(t-t0)))+min-c)\n            return sum\n\n        res_sqr = scipy.optimize.minimize(target_sqr, x0=x0, method='BFGS')\n        res_abs = scipy.optimize.minimize(target_abs, x0=x0, method='BFGS')\n        fig, ax = plt.subplots(figsize=(12,8))\n        curves = input.curves()\n\n        if 'exp' in curves:\n            ax.plot(ts, cs, marker='o', color = 'blue', label='Эксперимент')\n\n        xs = np.linspace(100, 400, 100)\n        y = f(x0)\n        err_vis = error(cs, y(xs))\n        if 'vis' in curves:\n            ax.plot(xs, y(xs), color = 'red', label= 'Визуальный подбор')\n\n        y = f(res_sqr.x)\n        err_sqr = error(cs, y(xs))\n        if 'mse' in curves:\n            ax.plot(xs, y(xs), color = 'green', label='sqr -> min (BFGS)')\n        y = f(res_abs.x)\n        err_abs = error(cs, y(xs))\n        if 'mae' in curves:\n            ax.plot(xs, y(xs), color = 'purple', label='abs -> min (BFGS)')\n        ax.legend();\n\n    @render.text\n    def output():\n        params = zip(\n            ['Визуально: ', 'sqr -> min:', 'abs -> min:'],\n            [x0, res_sqr.x, res_abs.x],\n            [err_vis, err_sqr, err_abs],\n        )\n        out_text = f'               max     min       k       t0   δ\\n'\n        for param in params:\n            title, (max, min, k, t0), err = param\n            out_text += f'{title}  {max:.3f} {min:.3f} {k:.5f} {t0:.3f} {err:.2f}%\\n'\n        return out_text\n\n\n\n#www_dir = Path(__file__).parent / \"www\"\napp = App(app_ui, server, debug=True)"
  }
]